#############################################################
#   WARNING: automatically generated file, DO NOT CHANGE!   #
#############################################################

# This file was automatically generated by the expand-yaml-anchors tool. The
# source file that generated this one is:
#
#   src/ci/github-actions/ci.yml
#
# Once you make changes to that file you need to run:
#
#   ./x.py run src/tools/expand-yaml-anchors/
#
# The CI build will fail if the tool is not run after changes to this file.

---
name: CI
"on": [push]
  # push:
  #   branches:
  #     - auto
  #     - try
  #     - try-perf
  #     - master
  # pull_request:
  #   branches:
  #     - "**"
defaults:
  run:
    shell: bash
jobs:
  auto:
    name: auto
    env:
      CI_JOB_NAME: "${{ matrix.name }}"
      # SCCACHE_BUCKET: rust-lang-ci-sccache2
      # DEPLOY_BUCKET: rust-lang-ci2
      TOOLSTATE_REPO: "https://github.com/rust-lang-nursery/rust-toolstate"
      # TOOLSTATE_ISSUES_API_URL: "https://api.github.com/repos/rust-lang/rust/issues"
      # TOOLSTATE_PUBLISH: 1
      CACHES_AWS_ACCESS_KEY_ID: AKIA46X5W6CZI5DHEBFL
      ARTIFACTS_AWS_ACCESS_KEY_ID: AKIA46X5W6CZN24CBO55
      CACHE_DOMAIN: ci-caches.rust-lang.org
    # if: "github.event_name == 'push' && github.ref == 'refs/heads/auto' && github.repository == 'rust-lang-ci/rust'"
    strategy:
      matrix:
        include:
          - name: x86_64-msvc-1
            env:
              RUST_CONFIGURE_ARGS: "--build=x86_64-pc-windows-msvc --enable-profiler"
              SCRIPT: make ci-subset-1
            os: windows-2022
          # - name: x86_64-msvc-2
          #   env:
          #     RUST_CONFIGURE_ARGS: "--build=x86_64-pc-windows-msvc --enable-profiler"
          #     SCRIPT: make ci-subset-2
          #   os: windows-2022
          # - name: i686-msvc-1
          #   env:
          #     RUST_CONFIGURE_ARGS: "--build=i686-pc-windows-msvc"
          #     SCRIPT: make ci-subset-1
          #   os: windows-2022
          # - name: i686-msvc-2
          #   env:
          #     RUST_CONFIGURE_ARGS: "--build=i686-pc-windows-msvc"
          #     SCRIPT: make ci-subset-2
          #   os: windows-2022
          # - name: x86_64-msvc-cargo
          #   env:
          #     SCRIPT: python x.py --stage 2 test src/tools/cargotest src/tools/cargo
          #     RUST_CONFIGURE_ARGS: "--build=x86_64-pc-windows-msvc --enable-lld"
          #   os: windows-2022
          # - name: x86_64-msvc-tools
          #   env:
          #     SCRIPT: src/ci/docker/host-x86_64/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstate/toolstates.json windows
          #     RUST_CONFIGURE_ARGS: "--build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstate/toolstates.json"
          #     DEPLOY_TOOLSTATES_JSON: toolstates-windows.json
          #   os: windows-2022
          # - name: i686-mingw-1
          #   env:
          #     RUST_CONFIGURE_ARGS: "--build=i686-pc-windows-gnu"
          #     SCRIPT: make ci-mingw-subset-1
          #     CUSTOM_MINGW: 1
          #   os: windows-2022
          # - name: i686-mingw-2
          #   env:
          #     RUST_CONFIGURE_ARGS: "--build=i686-pc-windows-gnu"
          #     SCRIPT: make ci-mingw-subset-2
          #     CUSTOM_MINGW: 1
          #   os: windows-2022
          # - name: x86_64-mingw-1
          #   env:
          #     SCRIPT: make ci-mingw-subset-1
          #     RUST_CONFIGURE_ARGS: "--build=x86_64-pc-windows-gnu --enable-profiler"
          #     CUSTOM_MINGW: 1
          #   os: windows-2022
          # - name: x86_64-mingw-2
          #   env:
          #     SCRIPT: make ci-mingw-subset-2
          #     RUST_CONFIGURE_ARGS: "--build=x86_64-pc-windows-gnu --enable-profiler"
          #     CUSTOM_MINGW: 1
          #   os: windows-2022
          # - name: dist-x86_64-msvc
          #   env:
          #     RUST_CONFIGURE_ARGS: "--build=x86_64-pc-windows-msvc --host=x86_64-pc-windows-msvc --target=x86_64-pc-windows-msvc --enable-full-tools --enable-profiler"
          #     SCRIPT: python x.py dist
          #     DIST_REQUIRE_ALL_TOOLS: 1
          #   os: windows-2022
          # - name: dist-i686-msvc
          #   env:
          #     RUST_CONFIGURE_ARGS: "--build=i686-pc-windows-msvc --host=i686-pc-windows-msvc --target=i686-pc-windows-msvc,i586-pc-windows-msvc --enable-full-tools --enable-profiler"
          #     SCRIPT: python x.py dist
          #     DIST_REQUIRE_ALL_TOOLS: 1
          #   os: windows-2022
          # - name: dist-aarch64-msvc
          #   env:
          #     RUST_CONFIGURE_ARGS: "--build=x86_64-pc-windows-msvc --host=aarch64-pc-windows-msvc --enable-full-tools --enable-profiler"
          #     SCRIPT: python x.py dist
          #     DIST_REQUIRE_ALL_TOOLS: 0
          #     WINDOWS_SDK_20348_HACK: 1
          #   os: windows-2022
          # - name: dist-i686-mingw
          #   env:
          #     RUST_CONFIGURE_ARGS: "--build=i686-pc-windows-gnu --enable-full-tools --enable-profiler"
          #     SCRIPT: python x.py dist
          #     CUSTOM_MINGW: 1
          #     DIST_REQUIRE_ALL_TOOLS: 1
          #   os: windows-2022
          # - name: dist-x86_64-mingw
          #   env:
          #     SCRIPT: python x.py dist
          #     RUST_CONFIGURE_ARGS: "--build=x86_64-pc-windows-gnu --enable-full-tools --enable-profiler"
          #     CUSTOM_MINGW: 1
          #     DIST_REQUIRE_ALL_TOOLS: 1
          #   os: windows-2022
          # - name: dist-x86_64-msvc-alt
          #   env:
          #     RUST_CONFIGURE_ARGS: "--build=x86_64-pc-windows-msvc --enable-extended --enable-profiler"
          #     SCRIPT: python x.py dist
          #   os: windows-2022
    timeout-minutes: 600
    runs-on: "${{ matrix.os }}"
    steps:
      - name: disable git crlf conversion
        run: git config --global core.autocrlf false
      - name: checkout the source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      # - name: configure the PR in which the error message will be posted
      #   run: "echo \"[CI_PR_NUMBER=$num]\""
      #   env:
      #     num: "${{ github.event.number }}"
      #   if: "success() && !env.SKIP_JOB && github.event_name == 'pull_request'"
      - name: add extra environment variables
        run: src/ci/scripts/setup-environment.sh
        env:
          EXTRA_VARIABLES: "${{ toJson(matrix.env) }}"
        if: success() && !env.SKIP_JOB
      # - name: decide whether to skip this job
      #   run: src/ci/scripts/should-skip-this.sh
      #   if: success() && !env.SKIP_JOB
      # - name: ensure the channel matches the target branch
      #   run: src/ci/scripts/verify-channel.sh
      #   if: success() && !env.SKIP_JOB
      # - name: configure GitHub Actions to kill the build when outdated
      #   uses: rust-lang/simpleinfra/github-actions/cancel-outdated-builds@master
      #   with:
      #     github_token: "${{ secrets.github_token }}"
      #   if: "success() && !env.SKIP_JOB && github.ref != 'refs/heads/try'"
      - name: collect CPU statistics
        run: src/ci/scripts/collect-cpu-stats.sh
        if: success() && !env.SKIP_JOB
      - name: show the current environment
        run: src/ci/scripts/dump-environment.sh
        if: success() && !env.SKIP_JOB
      - name: install awscli
        run: src/ci/scripts/install-awscli.sh
        if: success() && !env.SKIP_JOB
      - name: install sccache
        run: src/ci/scripts/install-sccache.sh
        if: success() && !env.SKIP_JOB
      - name: install clang
        run: src/ci/scripts/install-clang.sh
        if: success() && !env.SKIP_JOB
      - name: install WIX
        run: src/ci/scripts/install-wix.sh
        if: success() && !env.SKIP_JOB
      - name: ensure the build happens on a partition with enough space
        run: src/ci/scripts/symlink-build-dir.sh
        if: success() && !env.SKIP_JOB
      - name: disable git crlf conversion
        run: src/ci/scripts/disable-git-crlf-conversion.sh
        if: success() && !env.SKIP_JOB
      - name: install MSYS2
        run: src/ci/scripts/install-msys2.sh
        if: success() && !env.SKIP_JOB
      - name: install MinGW
        run: src/ci/scripts/install-mingw.sh
        if: success() && !env.SKIP_JOB
      - name: install ninja
        run: src/ci/scripts/install-ninja.sh
        if: success() && !env.SKIP_JOB
      - name: enable ipv6 on Docker
        run: src/ci/scripts/enable-docker-ipv6.sh
        if: success() && !env.SKIP_JOB
      - name: disable git crlf conversion
        run: src/ci/scripts/disable-git-crlf-conversion.sh
        if: success() && !env.SKIP_JOB
      - name: checkout submodules
        run: src/ci/scripts/checkout-submodules.sh
        if: success() && !env.SKIP_JOB
      # - name: ensure line endings are correct
      #   run: src/ci/scripts/verify-line-endings.sh
      #   if: success() && !env.SKIP_JOB
      # - name: ensure backported commits are in upstream branches
      #   run: src/ci/scripts/verify-backported-commits.sh
      #   if: success() && !env.SKIP_JOB
      - name: run the build
        run: src/ci/scripts/run-build-from-ci.sh
        env:
          AWS_ACCESS_KEY_ID: "${{ env.CACHES_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}"
          # TOOLSTATE_REPO_ACCESS_TOKEN: "${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}"
        if: success() && !env.SKIP_JOB
      # - name: upload artifacts to S3
      #   run: src/ci/scripts/upload-artifacts.sh
      #   env:
      #     AWS_ACCESS_KEY_ID: "${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}"
      #     AWS_SECRET_ACCESS_KEY: "${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}"
      #   if: "success() && !env.SKIP_JOB && (github.event_name == 'push' || env.DEPLOY == '1' || env.DEPLOY_ALT == '1')"
